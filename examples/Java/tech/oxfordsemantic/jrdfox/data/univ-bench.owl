Prefix(:=<http://swat.cse.lehigh.edu/onto/univ-bench.owl#>)

Ontology(<http://swat.cse.lehigh.edu/onto/univ-bench.owl>
Annotation(owl:versionInfo "univ-bench-ontology-owl, ver April 1, 2004")
Annotation(rdfs:label "Univ-bench Ontology")
Annotation(rdfs:comment "An university ontology for benchmark tests")

Declaration(Class(:AdministrativeStaff))
Declaration(Class(:Article))
Declaration(Class(:AssistantProfessor))
Declaration(Class(:AssociateProfessor))
Declaration(Class(:Book))
Declaration(Class(:Chair))
Declaration(Class(:ClericalStaff))
Declaration(Class(:College))
Declaration(Class(:ConferencePaper))
Declaration(Class(:Course))
Declaration(Class(:Dean))
Declaration(Class(:Department))
Declaration(Class(:Director))
Declaration(Class(:Employee))
Declaration(Class(:Faculty))
Declaration(Class(:FullProfessor))
Declaration(Class(:GraduateCourse))
Declaration(Class(:GraduateStudent))
Declaration(Class(:Institute))
Declaration(Class(:JournalArticle))
Declaration(Class(:Lecturer))
Declaration(Class(:Manual))
Declaration(Class(:Organization))
Declaration(Class(:Person))
Declaration(Class(:PostDoc))
Declaration(Class(:Professor))
Declaration(Class(:Program))
Declaration(Class(:Publication))
Declaration(Class(:Research))
Declaration(Class(:ResearchAssistant))
Declaration(Class(:ResearchGroup))
Declaration(Class(:Schedule))
Declaration(Class(:Software))
Declaration(Class(:Specification))
Declaration(Class(:Student))
Declaration(Class(:SystemsStaff))
Declaration(Class(:TeachingAssistant))
Declaration(Class(:TechnicalReport))
Declaration(Class(:UndergraduateStudent))
Declaration(Class(:University))
Declaration(Class(:UnofficialPublication))
Declaration(Class(:VisitingProfessor))
Declaration(Class(:Work))
Declaration(ObjectProperty(:advisor))
Declaration(ObjectProperty(:affiliateOf))
Declaration(ObjectProperty(:affiliatedOrganizationOf))
Declaration(ObjectProperty(:degreeFrom))
Declaration(ObjectProperty(:doctoralDegreeFrom))
Declaration(ObjectProperty(:hasAlumnus))
Declaration(ObjectProperty(:headOf))
Declaration(ObjectProperty(:listedCourse))
Declaration(ObjectProperty(:mastersDegreeFrom))
Declaration(ObjectProperty(:member))
Declaration(ObjectProperty(:memberOf))
Declaration(ObjectProperty(:orgPublication))
Declaration(ObjectProperty(:publicationAuthor))
Declaration(ObjectProperty(:publicationDate))
Declaration(ObjectProperty(:publicationResearch))
Declaration(ObjectProperty(:researchProject))
Declaration(ObjectProperty(:softwareDocumentation))
Declaration(ObjectProperty(:softwareVersion))
Declaration(ObjectProperty(:subOrganizationOf))
Declaration(ObjectProperty(:takesCourse))
Declaration(ObjectProperty(:teacherOf))
Declaration(ObjectProperty(:teachingAssistantOf))
Declaration(ObjectProperty(:tenured))
Declaration(ObjectProperty(:undergraduateDegreeFrom))
Declaration(ObjectProperty(:worksFor))
Declaration(DataProperty(:age))
Declaration(DataProperty(:emailAddress))
Declaration(DataProperty(:name))
Declaration(DataProperty(:officeNumber))
Declaration(DataProperty(:researchInterest))
Declaration(DataProperty(:telephone))
Declaration(DataProperty(:title))
AnnotationAssertion(rdfs:label :AdministrativeStaff "administrative staff worker")
SubClassOf(:AdministrativeStaff :Employee)
AnnotationAssertion(rdfs:label :Article "article")
SubClassOf(:Article :Publication)
AnnotationAssertion(rdfs:label :AssistantProfessor "assistant professor")
SubClassOf(:AssistantProfessor :Professor)
AnnotationAssertion(rdfs:label :AssociateProfessor "associate professor")
SubClassOf(:AssociateProfessor :Professor)
AnnotationAssertion(rdfs:label :Book "book")
SubClassOf(:Book :Publication)
AnnotationAssertion(rdfs:label :Chair "chair")
EquivalentClasses(:Chair ObjectIntersectionOf(ObjectSomeValuesFrom(:headOf :Department) :Person))
SubClassOf(:Chair :Professor)
AnnotationAssertion(rdfs:label :ClericalStaff "clerical staff worker")
SubClassOf(:ClericalStaff :AdministrativeStaff)
AnnotationAssertion(rdfs:label :College "school")
SubClassOf(:College :Organization)
AnnotationAssertion(rdfs:label :ConferencePaper "conference paper")
SubClassOf(:ConferencePaper :Article)
AnnotationAssertion(rdfs:label :Course "teaching course")
SubClassOf(:Course :Work)
AnnotationAssertion(rdfs:label :Dean "dean")
EquivalentClasses(:Dean ObjectIntersectionOf(ObjectSomeValuesFrom(:headOf :College)))
SubClassOf(:Dean :Professor)
AnnotationAssertion(rdfs:label :Department "university department")
SubClassOf(:Department :Organization)
AnnotationAssertion(rdfs:label :Director "director")
EquivalentClasses(:Director ObjectIntersectionOf(ObjectSomeValuesFrom(:headOf :Program) :Person))
AnnotationAssertion(rdfs:label :Employee "Employee")
EquivalentClasses(:Employee ObjectIntersectionOf(ObjectSomeValuesFrom(:worksFor :Organization) :Person))
AnnotationAssertion(rdfs:label :Faculty "faculty member")
SubClassOf(:Faculty :Employee)
AnnotationAssertion(rdfs:label :FullProfessor "full professor")
SubClassOf(:FullProfessor :Professor)
AnnotationAssertion(rdfs:label :GraduateCourse "Graduate Level Courses")
SubClassOf(:GraduateCourse :Course)
AnnotationAssertion(rdfs:label :GraduateStudent "graduate student")
SubClassOf(:GraduateStudent :Person)
SubClassOf(:GraduateStudent ObjectSomeValuesFrom(:takesCourse :GraduateCourse))
AnnotationAssertion(rdfs:label :Institute "institute")
SubClassOf(:Institute :Organization)
AnnotationAssertion(rdfs:label :JournalArticle "journal article")
SubClassOf(:JournalArticle :Article)
AnnotationAssertion(rdfs:label :Lecturer "lecturer")
SubClassOf(:Lecturer :Faculty)
AnnotationAssertion(rdfs:label :Manual "manual")
SubClassOf(:Manual :Publication)
AnnotationAssertion(rdfs:label :Organization "organization")
AnnotationAssertion(rdfs:label :Person "person")
AnnotationAssertion(rdfs:label :PostDoc "post doctorate")
SubClassOf(:PostDoc :Faculty)
AnnotationAssertion(rdfs:label :Professor "professor")
SubClassOf(:Professor :Faculty)
AnnotationAssertion(rdfs:label :Program "program")
SubClassOf(:Program :Organization)
AnnotationAssertion(rdfs:label :Publication "publication")
AnnotationAssertion(rdfs:label :Research "research work")
SubClassOf(:Research :Work)
AnnotationAssertion(rdfs:label :ResearchAssistant "university research assistant")
SubClassOf(:ResearchAssistant :Person)
SubClassOf(:ResearchAssistant ObjectSomeValuesFrom(:worksFor :ResearchGroup))
AnnotationAssertion(rdfs:label :ResearchGroup "research group")
SubClassOf(:ResearchGroup :Organization)
AnnotationAssertion(rdfs:label :Schedule "schedule")
AnnotationAssertion(rdfs:label :Software "software program")
SubClassOf(:Software :Publication)
AnnotationAssertion(rdfs:label :Specification "published specification")
SubClassOf(:Specification :Publication)
AnnotationAssertion(rdfs:label :Student "student")
EquivalentClasses(:Student ObjectIntersectionOf(ObjectSomeValuesFrom(:takesCourse :Course) :Person))
AnnotationAssertion(rdfs:label :SystemsStaff "systems staff worker")
SubClassOf(:SystemsStaff :AdministrativeStaff)
AnnotationAssertion(rdfs:label :TeachingAssistant "university teaching assistant")
EquivalentClasses(:TeachingAssistant ObjectIntersectionOf(ObjectSomeValuesFrom(:teachingAssistantOf :Course) :Person))
AnnotationAssertion(rdfs:label :TechnicalReport "technical report")
SubClassOf(:TechnicalReport :Article)
AnnotationAssertion(rdfs:label :UndergraduateStudent "undergraduate student")
SubClassOf(:UndergraduateStudent :Student)
AnnotationAssertion(rdfs:label :University "university")
SubClassOf(:University :Organization)
AnnotationAssertion(rdfs:label :UnofficialPublication "unnoficial publication")
SubClassOf(:UnofficialPublication :Publication)
AnnotationAssertion(rdfs:label :VisitingProfessor "visiting professor")
SubClassOf(:VisitingProfessor :Professor)
AnnotationAssertion(rdfs:label :Work "Work")
AnnotationAssertion(rdfs:label :advisor "is being advised by")
ObjectPropertyDomain(:advisor :Person)
ObjectPropertyRange(:advisor :Professor)
AnnotationAssertion(rdfs:label :affiliateOf "is affiliated with")
ObjectPropertyDomain(:affiliateOf :Organization)
ObjectPropertyRange(:affiliateOf :Person)
AnnotationAssertion(rdfs:label :affiliatedOrganizationOf "is affiliated with")
ObjectPropertyDomain(:affiliatedOrganizationOf :Organization)
ObjectPropertyRange(:affiliatedOrganizationOf :Organization)
AnnotationAssertion(rdfs:label :degreeFrom "has a degree from")
InverseObjectProperties(:degreeFrom :hasAlumnus)
ObjectPropertyDomain(:degreeFrom :Person)
ObjectPropertyRange(:degreeFrom :University)
AnnotationAssertion(rdfs:label :doctoralDegreeFrom "has a doctoral degree from")
SubObjectPropertyOf(:doctoralDegreeFrom :degreeFrom)
ObjectPropertyDomain(:doctoralDegreeFrom :Person)
ObjectPropertyRange(:doctoralDegreeFrom :University)
AnnotationAssertion(rdfs:label :hasAlumnus "has as an alumnus")
ObjectPropertyDomain(:hasAlumnus :University)
ObjectPropertyRange(:hasAlumnus :Person)
AnnotationAssertion(rdfs:label :headOf "is the head of")
SubObjectPropertyOf(:headOf :worksFor)
AnnotationAssertion(rdfs:label :listedCourse "lists as a course")
ObjectPropertyDomain(:listedCourse :Schedule)
ObjectPropertyRange(:listedCourse :Course)
AnnotationAssertion(rdfs:label :mastersDegreeFrom "has a masters degree from")
SubObjectPropertyOf(:mastersDegreeFrom :degreeFrom)
ObjectPropertyDomain(:mastersDegreeFrom :Person)
ObjectPropertyRange(:mastersDegreeFrom :University)
AnnotationAssertion(rdfs:label :member "has as a member")
InverseObjectProperties(:memberOf :member)
ObjectPropertyDomain(:member :Organization)
ObjectPropertyRange(:member :Person)
AnnotationAssertion(rdfs:label :memberOf "member of")
AnnotationAssertion(rdfs:label :orgPublication "publishes")
ObjectPropertyDomain(:orgPublication :Organization)
ObjectPropertyRange(:orgPublication :Publication)
AnnotationAssertion(rdfs:label :publicationAuthor "was written by")
ObjectPropertyDomain(:publicationAuthor :Publication)
ObjectPropertyRange(:publicationAuthor :Person)
AnnotationAssertion(rdfs:label :publicationDate "was written on")
ObjectPropertyDomain(:publicationDate :Publication)
AnnotationAssertion(rdfs:label :publicationResearch "is about")
ObjectPropertyDomain(:publicationResearch :Publication)
ObjectPropertyRange(:publicationResearch :Research)
AnnotationAssertion(rdfs:label :researchProject "has as a research project")
ObjectPropertyDomain(:researchProject :ResearchGroup)
ObjectPropertyRange(:researchProject :Research)
AnnotationAssertion(rdfs:label :softwareDocumentation "is documented in")
ObjectPropertyDomain(:softwareDocumentation :Software)
ObjectPropertyRange(:softwareDocumentation :Publication)
AnnotationAssertion(rdfs:label :softwareVersion "is version")
ObjectPropertyDomain(:softwareVersion :Software)
AnnotationAssertion(rdfs:label :subOrganizationOf "is part of")
TransitiveObjectProperty(:subOrganizationOf)
ObjectPropertyDomain(:subOrganizationOf :Organization)
ObjectPropertyRange(:subOrganizationOf :Organization)
AnnotationAssertion(rdfs:label :takesCourse "is taking")
AnnotationAssertion(rdfs:label :teacherOf "teaches")
ObjectPropertyDomain(:teacherOf :Faculty)
ObjectPropertyRange(:teacherOf :Course)
AnnotationAssertion(rdfs:label :teachingAssistantOf "is a teaching assistant for")
ObjectPropertyDomain(:teachingAssistantOf :TeachingAssistant)
ObjectPropertyRange(:teachingAssistantOf :Course)
AnnotationAssertion(rdfs:label :tenured "is tenured:")
ObjectPropertyDomain(:tenured :Professor)
AnnotationAssertion(rdfs:label :undergraduateDegreeFrom "has an undergraduate degree from")
SubObjectPropertyOf(:undergraduateDegreeFrom :degreeFrom)
ObjectPropertyDomain(:undergraduateDegreeFrom :Person)
ObjectPropertyRange(:undergraduateDegreeFrom :University)
AnnotationAssertion(rdfs:label :worksFor "Works For")
SubObjectPropertyOf(:worksFor :memberOf)
AnnotationAssertion(rdfs:label :age "is age")
DataPropertyDomain(:age :Person)
AnnotationAssertion(rdfs:label :emailAddress "can be reached at")
DataPropertyDomain(:emailAddress :Person)
AnnotationAssertion(rdfs:label :name "name")
AnnotationAssertion(rdfs:label :officeNumber "office room No.")
AnnotationAssertion(rdfs:label :researchInterest "is researching")
AnnotationAssertion(rdfs:label :telephone "telephone number")
DataPropertyDomain(:telephone :Person)
AnnotationAssertion(rdfs:label :title "title")
DataPropertyDomain(:title :Person)
)